/*
 * date : 20170619
 * author : wei.meng @ slamtec
 * version : 0.4
 * modify : 20170619 - remove the folder creator of changelog saver
 * modify : 20170627 - get all the results and send failed email report
 * description : the rebuild time maybe not work fine. - always branch xxxx failed.
*/

def date_build 
def version_build
def commit_id = {}

configENV()

stage "Get Parameters"
node('Rsg-slave4')
{
    //checkout
    // git log get the last commit id 
    def modules = ["agent","sdp","sdk","firmwares/base","firmwares/cp0","firmwares/ui","firmwares/zeus","platforms/edison","platforms/phoenix"]
     if ("${DATE_OF_BUILD}" == "")
    {
        date_build = new Date().format('yyyyMMdd')
        print "DATE_OF_BUILD is null"
    }
    checkoutGIT()
    
    if ("${VERSION_OF_BUILD}" == "")
    {
        version_build = (getVersion().tokenize())[0]
        version_build.replace(' ','')
        print "VERSION_OF_BUILD is null"
    }
    // get the sha of the last commit 

    commit_id = getCommitID()
    print "${DATE_OF_BUILD}"
    echo "${DATE_OF_BUILD}"
   
    
    print date_build
    print version_build
    
    for (module in modules)
    {
        print module
        print commit_id[module]
    }
}

stage "Stage One - Build "


def build_times = "${REBUILD_TIMES}".toInteger()
def path_of_release = "${DAILY_FOLDER}"
def path_share_release = "$SHARE_PATH"
def branch_build = "${RELEASE_BRANCH}"
def branches = [:]
def results_all = {}
// agent
branches['RPSG-RELEASE-branch-agent-daily——_new'] = {
    echo "all - " + build_times
    int i = 0
    def result = []
    while (i < build_times)
    {
        
        result = build job:'RPSG-RELEASE-branch-agent-daily_new',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["agent"] ],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: branch_build]
        ], propagate: false
        
        if(result["result"] == "SUCCESS")
        {
            echo "Test Daily [RPSG-RELEASE-branch-agent-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            echo "Test Daily [RPSG-RELEASE-branch-agent-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }

    }
    results_all['RPSG-RELEASE-branch-agent-daily_new'] = result
    
}
//agent
branches['RPSG-RELEASE-branch-agent_x1000-daily_new'] = {
    int i = 0
    def result = []
    while(i < build_times)
    {
        result = build job: 'RPSG-RELEASE-branch-agent_x1000-daily_new',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["agent"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: branch_build]
        ], propagate: false
        
        if(result["result"] == "SUCCESS")
        {
            echo "Test Daily [RPSG-RELEASE-branch-agent_x1000-daily_new] Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            echo "Test Daily [RPSG-RELEASE-branch-agent_x1000-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }
    }
    results_all["RPSG-RELEASE-branch-agent_x1000-daily_new"] = result
}
//sdp
branches['RPSG-RELEASE-branch-depthcam-daily_new'] = {
    int i = 0
    def result = []
    while(i < build_times)
    {
        result = build job:'RPSG-RELEASE-branch-depthcam-daily_new',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdp"] ],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: branch_build]
        ], propagate: false
        if(result["result"] == "SUCCESS")
        {
            echo "Test Daily [RPSG-RELEASE-branch-depthcam-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            echo "Test Daily [RPSG-RELEASE-branch-depthcam-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }
    }
    results_all["RPSG-RELEASE-branch-depthcam-daily_new"] = result
        
    
}

//firmwares base cp0 ui zeus
branches['RPSG-RELEASE-branch-firmware-daily_new'] = {
    int i = 0
    def result = []
    while(i < build_times)
    {
        
        result = build job:'RPSG-RELEASE-branch-firmware-daily_new',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID_BASE', value: commit_id["firmwares/base"] ],
        [$class: 'StringParameterValue', name: 'COMMIT_ID_CP0', value: commit_id["firmwares/cp0"] ],
        [$class: 'StringParameterValue', name: 'COMMIT_ID_UI', value: commit_id["firmwares/ui"] ],
        [$class: 'StringParameterValue', name: 'COMMIT_ID_ZEUS', value: commit_id["firmwares/zeus"] ],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_share_release],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: branch_build]
        ], propagate: false
        
        
        if(result["result"] == "SUCCESS")
        {
            echo "Test Daily [RPSG-RELEASE-branch-firmware-daily_new]  Successful !"

            echo "-----------------------------------------------------"
            break
        }
        else{
            echo "Test Daily [RPSG-RELEASE-branch-firmware-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }
    }
    results_all["RPSG-RELEASE-branch-firmware-daily_new"] = result

}

//sdp

branches['RPSG-RELEASE-branch-slamwared-daily_new'] = {
    int i = 0
    def result = []
    while(i < build_times)
    {
        result = build job:'RPSG-RELEASE-branch-slamwared-daily_new',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdp"] ],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: branch_build]
        ], propagate: false
        
        if(result["result"] == "SUCCESS")
        {
            echo "Test Daily [RPSG-RELEASE-branch-slamwared-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            echo "Test Daily [RPSG-RELEASE-branch-slamwared-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }
    }
    
    results_all["RPSG-RELEASE-branch-slamwared-daily_new"] = result
}

branches['RPSG-RELEASE-branch-slamwared_x1000-daily_new'] = {
    int i = 0
    def result = []
    while(i < build_times)
    {
        result = build job:'RPSG-RELEASE-branch-slamwared_x1000-daily_new',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdp"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: branch_build]
        ], propagate: false
        
        if(result["result"] == "SUCCESS")
        {
            echo "Test Daily [RPSG-RELEASE-branch-slamwared_x1000-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            echo "Test Daily [RPSG-RELEASE-branch-slamwared_x1000-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }
    }
    results_all["RPSG-RELEASE-branch-slamwared_x1000-daily_new"] = result
}

/*
branches["RPSG-RELEASE-sweep_opt-slamwared_x1000-daily"] = {
    int i = 0
    while(i < build_times)
    {
        build 'RPSG-RELEASE-sweep_opt-slamwared_x1000-daily',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdp"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release]
        ]
        if(result["result"] == "SUCCESS")
        {
            echo "Test Daily Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            echo "Test Daily Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }
    }
    
}
*/
parallel branches



stage "Daily Build edison x1000"
def package_build = [:]

package_build["RPSG-RELEASE-branch-system_edison-daily_new"] = {

    def result =  build job:'RPSG-RELEASE-branch-system_edison-daily_new',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["platforms/edison"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: branch_build]
        ], propagate: false
    if ( result["result"] == "SUCCESS")
    {
        echo "----------------------------------------"
        echo "[RPSG-RELEASE-branch-system_edison-daily_new] build successful !"
    }
    else
    {
        echo "----------------------------------------"
        echo "[RPSG-RELEASE-branch-system_edison-daily_new] build failed !"
    }
    results_all["RPSG-RELEASE-branch-system_edison-daily_new"] = result

}

package_build["RPSG-RELEASE-branch-system_x1000-daily_new"] = {
    
    def result = build job:'RPSG-RELEASE-branch-system_x1000-daily_new',parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["platforms/phoenix"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build],
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build],
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release],
        [$class: 'StringParameterValue', name: 'RELEASE_BRANCH', value: branch_build]
        ], propagate: false

    if (result["result"] == "SUCCESS")
    {
        echo "-----------------------------------------------"
        echo "[RPSG-RELEASE-branch-system_x1000-daily_new] build successful !"
    }
    else{
        echo "[RPSG-RELEASE-branch-system_x1000-daily_new] build failed !"
    }
    results_all["RPSG-RELEASE-branch-system_x1000-daily_new"] = result
    
}







if(results_all["RPSG-RELEASE-branch-agent-daily_new"]["result"] == "SUCCESS" && results_all["RPSG-RELEASE-branch-depthcam-daily_new"]["result"] == "SUCCESS" && 
   results_all["RPSG-RELEASE-branch-firmware-daily_new"]["result"] == "SUCCESS" && results_all["RPSG-RELEASE-branch-slamwared-daily_new"]["result"] == "SUCCESS" &&
   results_all["RRPSG-RELEASE-branch-agent_x1000-daily_new"]["result"] == "SUCCESS" && results_all["RPSG-RELEASE-branch-slamwared_x1000-daily_new"]["result"] == "SUCCESS" )
   {
       parallel package_build
       def builds1 = ["RPSG-RELEASE-branch-system_edison-daily_new","RPSG-RELEASE-branch-system_x1000-daily_new"]
       if(results_all["RPSG-RELEASE-branch-system_x1000-daily_new"]["result"]=="SUCCESS" && results_all["RPSG-RELEASE-branch-system_x1000-daily_new"]["result"]=="SUCCESS")
       {
           
       }
       else{
           def strings1 = """ """
           for(build in builds1)
           {
               strings1 = strings1 + """<tr align="center" bgcolor="#F0F8FF" height="40px" style="color:black"><td width="15%">"""+ build +"""</td><td width="15%">"""+ results_all[build]["id"] +"""</td><td width="15%">"""+results_all[build]["result"] +"""</td><td width="55%">""" + results_all[build]["absoluteUrl"] + """ </td></tr>\n"""
           }
           print strings1
           
            emailfailed(strings1)
            error 'build failed'
       }
   }
else{
    def builds = ["RPSG-RELEASE-branch-agent-daily_new","RPSG-RELEASE-branch-depthcam-daily_new",
        "RPSG-RELEASE-branch-firmware-daily_new","RRPSG-RELEASE-branch-agent_x1000-daily_new",
        "RPSG-RELEASE-branch-slamwared-daily_new","RPSG-RELEASE-branch-slamwared_x1000-daily_new"
        ]
    
    echo "------------------------- wrong with build ----------------------------"
    def strings = """ """
    for(build in builds)
    {
        print results_all[build]
        
    }
    for(build in builds)
    {
    
        strings = strings + """<tr align="center" bgcolor="#F0F8FF" height="40px" style="color:black"><td width="15%">"""+ build +"""</td><td width="15%">"""+ results_all[build]["id"] +"""</td><td width="15%">"""+results_all[build]["result"] +"""</td><td width="55%">""" + results_all[build]["absoluteUrl"] + """ </td></tr>\n"""
    }
    print strings
    emailfailed(strings)
    error 'build failed'
}

//    build 'RPSG-RELEASE-x1000-daily',parameters: [[$class: 'StringParameterValue', name: 'COMMIT_ID', value: COMMIT_ID]]
//    build 'RPSG-RELEASE-sweep_opt-system_x1000-daily-test',parameters: [[$class: 'StringParameterValue', name: 'COMMIT_ID', value: COMMIT_ID]]


def configENV()
{
    try { env.COMMIT_ID = "${COMMIT_ID}"               }catch(Exception e){}
    try { env.DATE_OF_BUILD = "${DATE_OF_BUILD}"       }catch(Exception e){}
    try { env.VERSION_OF_BUILD = "${VERSION_OF_BUILD}" }catch(Exception e){}

}

def checkoutGIT()
{
   // sh 'rm -rf ./*'
   //refs/heads/${RELEASE_BRANCH}
    checkout([$class: 'GitSCM', branches: [[name: "refs/heads/" + "${RELEASE_BRANCH}"]],
     doGenerateSubmoduleConfigurations: false, 
     extensions: [[$class: 'SubmoduleOption', disableSubmodules:false, 
                    parentCredentials: true, recursiveSubmodules: true, 
                    reference: '', trackingSubmodules: false]],
     gitTool: 'Default',
     submoduleCfg: [],
     userRemoteConfigs: [
         [credentialsId: '6e519a56-9857-46cc-ad30-369cd6984189',
         url: 'https://stash.slamtec.com/scm/slam/topic_slamware_release.git']
     ]
    ])
    //get commit id 
}

def getCommitID()
{
    if ("${DATE_OF_BUILD}" == "")
    {
        date_build = new Date().format('yyyyMMdd')
        print "DATE_OF_BUILD is null"
    }else{
        date_build = "${DATE_OF_BUILD}"
    }
    def currentdir = pwd()
    def commit_idx = {}
    dir(currentdir)
    {
        def submodules = ["agent","sdp","sdk","firmwares/base","firmwares/cp0","firmwares/ui","firmwares/zeus","platforms/edison","platforms/phoenix"]
        
        sh 'rm -rf ./master_changelog/*'
        sh 'if [ ! -d "master_changelog" ] ; then mkdir master_changelog; fi'
        //sh 'if [ ! -d "master_changelog/firmwares" ] ; then mkdir master_changelog/firmwares ; fi'
        //sh 'if [ ! -d "master_changelog/platforms" ] ; then mkdir master_changelog/platforms ; fi'
        for (submodule in submodules)
        {

            dir(submodule)
            {
                
                echo pwd()
                sh 'git checkout master'
                sh 'git pull'
                sh 'git submodule update --init --recursive'
                //sh 'if [ ! -f "gitchangelog.txt" ] ; then rm -f gitchangelog ; fi'
                sh 'echo ' + submodule + ' >> '+ currentdir +'/master_changelog/gitchangelog.txt'
                sh 'git whatchanged --since="1 days ago" >> ' + currentdir +'/master_changelog/gitchangelog.txt'
                sh 'git log -1 > gitchangelog.txt'
                //sh 'cp -f gitchangelog.txt ' + currentdir + '/master_changelog/' + submodule + '.log'
                sh 'head -1 gitchangelog.txt > commitid.txt'
                def strx = readFile 'commitid.txt'
                def str1 = strx.split(' ')
                for(str in str1)
                {
                    if (str.startsWith('commit'))
                        print "this is commit"
                    else
                        commit_idx[submodule] = str
                }
            }
        }
        sh 'mkdir -p ' + "${DAILY_FOLDER}" + "/changelog/" + date_build +"/"
        sh 'cp -rf master_changelog/* ' +  "${DAILY_FOLDER}"  + "/changelog/" + date_build +"/"
    }
    return commit_idx

}

def getchangelog()
{
    node('Rsg-slave7')
    {
        def date = new Date().format('yyyyMMdd')
        bat 'copy \\\\10.254.0.3\\share\\test_release\\daily\\changelog\\' + date + '\\gitchangelog.txt .\\gitchangelog.txt'
        
writeFile file: 'createfailreport.py', text: '''import os
class createFailReport(object):
    def __init__(self):
        self.tStatistics = open(".\\\\report.html" , \'wb\')
        
    def getchangelog(self):
        infos=[]
        f = open(".\\\\gitchangelog.txt","r")
        modules = ["agent","sdp","sdk","firmwares/base","firmwares/cp0","firmwares/ui","firmwares/zeus","platforms/edison","platforms/phoenix"]
        loginfo = {}
        i = 0
        for line in f.readlines():
            if line.replace("\\n","") in modules:
                print line
                project = line
                continue
            if i == 1:

                if (not line.startswith("commit")) and (not line.startswith("Author")) and (not line.startswith("Date")) and (not line.startswith(":"))  :
                    loginfo["info"] = loginfo["info"] + line
                else :
                    if ( line.startswith(":") or line.startswith("commit") ):
                        print loginfo["project"]
                        infos.append(loginfo)
                        i = 0
                    else :                        
                        if (not line.startswith("Date") ) and (not line.startswith("Author")) :
                            infos.append(loginfo)
                            i = 0
            if i == 1 and line.startswith("Date"):
                date,space,space,loginfo["week"],loginfo["month"],loginfo["day"],loginfo["time"],loginfo["year"],nouse = line.split(" ")
            if i == 1 and line.startswith("Author"):
                author = []
                author = line.split(" ")
                loginfo["name"] = " "
                for a in author:
                    if a.startswith("<"):
                        loginfo["email"] = a
                    if a == "Author:":
                        print " "
                    else:
                        loginfo["name"] = loginfo["name"] + a


            if i == 0 and line.startswith("commit"):
                i = 1
                loginfo = {}
                commit,loginfo["id"] = line.split(" ")
                loginfo["info"] = ""
                loginfo["project"] = project
        
        if i == 1 :
            infos.append(loginfo)
        f.close()

        self.tStatistics.write("""
            <br></br>
            <br></br>
            <table border="0" cellpadding="5"  align=center  cellspacing="2" width="95%">            
            <tr align="center" bgcolor="#000800" height="10px" style="color:white"><th> commit </th></tr>
            </table>
            <table  border="0" cellpadding="5"  align=center  cellspacing="2" width="95%">            
            <tr><th>i</th><th>module</th><th>id</th><th>time</th><th>message</th><th>name</th><th>email</th></tr>
            """)
        i = 1
        for f in infos:
            print f
            f["email"] = f["email"].replace("<","")
            f["email"] = f["email"].replace(">","")
            self.tStatistics.write("<tr><td>" +  str(i) + "</td><td>" + f["project"] + "</td><td>"+f["id"] + "</td><td>" + f["year"] + "-" + f["month"] + "-"+ f["day"] + "-"+ f["time"] + "</td><td>" + f["info"] + "</td><td>" + f["name"] + "</td><td>" + f["email"] + "</td></tr>")
            
            i = i + 1
        self.tStatistics.write("</table>")
    
    
    def createchangelog(self):
        if os.path.exists(".\\\\gitchangelog.txt"):
            print "[createReport] find the gitchangelog.txt "
            self.getchangelog()
        else:
            print "[createReport] do not find the gitchangelog"
if __name__ == "__main__":
    report = createFailReport()
    report.createchangelog()
'''
        bat 'python createfailreport.py'
        def changelog = readFile('report.html')
        return changelog
    }
   
}
def getVersion()
{
    version = readFile 'scripts/version.txt'
    return version
}

def emailfailed(substrs)
{
    subjects = "Build Daily Failed!"
    body = """
    <html>
        <head>
        <meta http-equiv="content-type" content="text/html;charset=utf-8">
        <title>ZEUS_DAILY TEST REPORT</title>
        <body style="zoom:70%">
            <div>
                <table  border="0" cellpadding="5"  align=center  cellspacing="2" width="95%"  >
                <tr bgcolor="#00FFFF" height="100px" style="color:red"><th width="100%">Daily Build Faild</th></tr>
                </table>
                
                <br></br>
                
                <table  border="0" cellpadding="5"  align=center  cellspacing="2" width="95%"  >
                <tr align="center" bgcolor="#F0F80F" height="10px" style="color:blue"><th width="15%"> sub build name</th><th width="15%">build number</th><th width="15%">build result</th><th width="55%">build url</th></tr>
                """ + substrs + 
                """
                </table>
                """ + getchangelog() + """
                
            </div>
        </body>
    </html>
    """
    
    
    mail body: body, cc: "${FAIL_MAIL_TO}", charset: 'UTF-8', mimeType: 'text/html',subject:subjects , to: "${FAIL_MAIL_TO}"
}
