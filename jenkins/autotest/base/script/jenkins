// m : change to 10.254.0.3 

import hudson.model.*
import jenkins.model.Jenkins
import hudson.AbortException
import org.jenkinsci.plugins.workflow.steps.FlowInterruptedException
import static groovy.io.FileType.FILES

echo "-----------------------------------------------------------------------------"
echo "Start Test now ... "
echo "PRODUCT NAME : " + "${PRODUCT_NAME}"
echo "Device Ip : " + "${IP_SLAMWARE}"
echo "-----------------------------------------------------------------------------"
echo "Test Stages : " + "${TEST_STAGES}"
echo "-----------------------------------------------------------------------------"



node("${PRODUCT_NAME}") {
    
    configEnv()
    echo env.PATH
    echo env.PYTHONPATH
    
    //when stage test failed, stop the whole test 
    testTypesStopOnFailed = ["Download Daily Build","Flash Wrong Build","Flash Daily Build","Flash Down and Up","Flash One Build","Simulator Mode","Send Report"]
    //the stage which is not need send report
    noNeedReportStage = ["Send Report"]
    
    testTypes = "${TEST_STAGES}".replaceAll(/\r\n|\r/,'\n').tokenize('\n')
    //at first the sendreport is not true
    sendReport = false
    
    //get the code from the git server , check out to the local dir "checkout"
    //dir("checkout")
    //{
       //checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'CleanBeforeCheckout'], [$class: 'CheckoutOption', timeout: 1], [$class: 'CloneOption', depth: 0, noTags: true, reference: '', shallow: true]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '6e519a56-9857-46cc-ad30-369cd6984189', url: 'https://stash.slamtec.com/scm/zeus/topic_zeus_test.git']]]
       
    //}
    
    checkout("https://wei.meng:TdCnps1o@stash.slamtec.com/scm/zeus/topic_zeus_test.git","checkout")
    
    //copy the code out of the checkout , just copy the stage code in the TEST_STAGES
    for(xxx in testTypes)
    {
        bat "xcopy /yse \".\\checkout\\" + xxx + "\\*\" \".\\" + xxx + "\\\""
    }
    
    //copy the pylibs and tools to the local dir
    bat "xcopy /yse .\\checkout\\base\\* .\\base\\"
    bat "xcopy /yse .\\checkout\\testdata\\* .\\testdata\\"
    bat "xcopy /yse " + "${PATH_OF_CHANGELOG}" + " .\\"
    
    //delete the reports and jsons file and logs
    deletedir(".\\testdata\\report")
    deletedir(".\\testdata\\report\\json")
    deletedir(".\\testdata\\report\\log\\Flash Daily Build")
    deletedir(".\\testdata\\report\\log\\Flash Down and Up")
    deletedir(".\\testdata\\report\\log\\Flash One Build")
    deletedir(".\\testdata\\report\\log\\Flash Wrong Build")
    deletedir(".\\testdata\\report\\log\\MoveTest")
    deletedir(".\\MoveTest\\json")
    deletedir(".\\MoveTest\\log")
    deletedir(".\\MoveTest\\report")
    
    
    
    //if TEST_STAGES contains the Send Report stage, we send the report
    if(testTypes.contains("Send Report")) 
    {
        sendReport = true
        echo "contain Send Report"
    }
    
    // run the test stage in turn
    for(t in testTypes)
    {
        if(t=="Send Report")
            continue
        echo "================================================================================"
        echo "= Stage " + t
        echo "================================================================================"
        stop_on_fail = false
        if(testTypesStopOnFailed.contains(t)) 
        {
            stop_on_fail = true
        }
        RunTestStage(t, sendReport, stop_on_fail)
        echo "================================================================================"
    }
    publishTestReport(testTypes, noNeedReportStage, sendReport)
}

def RunTestStage(this_stage, sendReport, stop_on_fail=true) {
    stage this_stage
    env.CURRENT_TEST = this_stage
    try {
        dir(this_stage) 
        {
            if(isUnix()) 
            {
                sh 'sh ./cirun'
            } 
            else {
                
                def cmd = '''cirun.cmd'''
                if(env.WINDOWS_SET_CHCP!=null) 
                {
                    cmd="chcp " + env.WINDOWS_SET_CHCP +'\r\n' + cmd
                }
                bat cmd
            }
            try {
                if(fileExists('report/report.xml'))
                    publishXML source:"report/report.xml",target:this_stage+".xml"
            }
            catch(Exception e) {
                    echo "no xml report"
            }
        }
    } 
    catch(org.jenkinsci.plugins.workflow.steps.FlowInterruptedException e) 
    {
        echo "org.jenkinsci.plugins.workflow.steps.FlowInterrupted"
        echo "org.jenkinsci.plugins.workflow.steps.FlowInterruptedException"
        echo e.toString()
        throw e
    } 
    catch(Exception e) 
    {
        echo e.toString()
        if(stop_on_fail) 
        {
            if(sendReport)
            {
                publishFailed(this_stage,e.toString())
            }
            throw e
        }
    }
}

def deletedir(dirname)
{
     bat "if exist \"" + dirname  +"\" ( del /Q \"" + dirname + "\\*\" )"
}

def configEnv() {
    
    try{ env.PRODUCT_NAME = "${PRODUCT_NAME}" }catch(Exception e) {}
    try{ env.SLAMWARE_PATH = "${SLAMWARE_PATH}" }catch(Exception e) {}
    try{ env.IP_SLAMWARE = "${IP_SLAMWARE}" }catch(Exception e){}
    try{ env.TEST_STAGES = "${TEST_STAGES}" }catch(Exception e){}
    try{ env.COUNT_OF_DOWNUP = "${COUNT_OF_DOWNUP}" }catch(Exception e){}
    try{ env.COUNT_OF_ONEBUILD = "${COUNT_OF_ONEBUILD}" }catch(Exception e){}
    try{ env.TEST_NAME = "${TEST_NAME}" }catch(Exception e){}
    try{ env.NAME_OF_ONEBUILD = "${NAME_OF_ONEBUILD}" }catch(Exception e){}
    try{ env.NAME_OF_DOWNBUILD = "${NAME_OF_DOWNBUILD}" }catch(Exception e){}
    try{ env.NAME_OF_UPBUILD = "${NAME_OF_UPBUILD}" }catch(Exception e){}
    try{ env.NAME_OF_WRONGBUILD = "${NAME_OF_WRONGBUILD}" }catch(Exception e){}
    try{ env.BUILD_RESULT = "${BUILD_RESULT}"}catch(Exception e){}
    
        a = env.PYTHONPATH
        pylib = pwd() + "\\base\\tools\\pylibs"
        if(a) 
        {
            env.PYTHONPATH = a + ";"+ pylib
        } else 
        {
            env.PYTHONPATH = pylib
        }
        echo env.PYTHONPATH
        env.REPORT_DIR = pwd() + "\\report"
        env.PATH = pwd() + "\\base\\tools\\win32tools;" + pwd() + "\\base\\tools\\ant\\bin;${env.PATH}"
        env.PYTHONUNBUFFERED="1"
}

//do not complete this function
def publishFailed(stage_name,errorinfo) {
    echo "================================================================================"
    echo "= Send Fail Email"
    subjects = stage_name + " Failed!"
    //detail = errorinfo
    
    //mail body: detail, cc: "${FAIL_MAIL_TO}", charset: 'UTF-8', mimeType: 'text/html',subject:subjects , to: "${FAIL_MAIL_TO}"
    
    stages = "${TEST_STAGES}".replaceAll(/\r\n|\r/,'\n').tokenize('\n')

    for(t in stages) 
    {
        if(t != stage_name && !noNeedReportStage.contains(t))  
        {
            bat 'copy  \"' + t +'\\report\\\"* ' + "testdata\\report\\"
            cmdstr = "move testdata\\report\\report.html \"testdata\\report\\" + t + '.html\"'
            bat cmdstr
            bat 'copy  \"' + t +'\\\"testinfo.json testdata\\report\\json\\'
            bat "move testdata\\report\\json\\testinfo.json \"testdata\\report\\json\\" + t + '.json\"'
            //not complete
            bat 'copy \"' + t + '\\log\\\"* ' + "\"testdata\\report\\log\\" + t + "\\\""
            
            //reportFiles = reportFiles + t +".html,"
        }
        else
        {
            break;
        }
        
    }
    bat "mkdir \\\\10.254.0.3\\Share\\test_release\\daily\\TestReport\\%JOB_NAME%\\%BUILD_NUMBER%"
    bat "xcopy /yse .\\testdata\\report\\* \\\\10.254.0.3\\Share\\test_release\\daily\\TestReport\\%JOB_NAME%\\%BUILD_NUMBER%\\"

    def htmlxxx = ' ' 
    def htmlyyy = ' '
    int yyy = 0
    print stages
    for (t in stages ) {
        
        htmlxxx = htmlxxx + """<th width=15%>""" + t + """</th>"""
        if (t == stage_name )
        {
            htmlyyy = htmlyyy + """<td width=15%> failed </th>"""
            yyy = 1
        }
        else{
            
            if (yyy == 0 && t != null){
                htmlyyy = htmlyyy + """<td width=15%> complete </th>"""
            }else if (yyy == 1 && t != null ){
    
                htmlyyy = htmlyyy + """<td width=15%> not run </th>"""
            }
        }
        
    }

    htmlxxx = htmlxxx + """</tr>"""
    htmlyyy = htmlyyy + """</tr>"""

    
    changelog = getchangelog()

    body = """
    <html>
        <head>
        <meta http-equiv="content-type" content="text/html;charset=utf-8">
        <title>ZEUS_DAILY TEST REPORT</title>
        <body>
            <div>
                <table  border="0" cellpadding="5"  align=center  cellspacing="2" width="95%"  >
                <tr bgcolor="#00FFFF" height="100px" style="color:red"><th width="100%">Daily Build Test Faild</th></tr>
                </table>
                
                <br></br>
                <table  border="0" cellpadding="5"  align=center  cellspacing="2" width="95%"  >
                <tr align="center" bgcolor="#00FFFF" height="10px" style="color:blue">""" + 
                htmlxxx +
                """<tr align="center" bgcolor="#E8FFF5" height="40px" style="color:black">""" +
                htmlyyy +
                """</table>

                <br></br>
                <table  border="0" cellpadding="5"  align=center  cellspacing="2" width="95%"  >
                <tr align="center" bgcolor="#F0F80F" height="10px" style="color:blue"><th width="15%">build name</th><th width="15%">build number</th><th width="15%">fail stage</th><th width="55%">build url</th></tr>
                <tr align="center" bgcolor="#F0F8FF" height="40px" style="color:black"><td width="15%">"""+  env.JOB_NAME  +"""</td><td width="15%">"""+ env.BUILD_NUMBER +"""</td><td width="15%">""" + stage_name + """</td><td width="55%">""" + env.BUILD_URL + """ </td></tr>
                </table>
                <br></br>
                 </table>
                <table border="0" cellpadding="5"  align=center  cellspacing="2" width="95%"  >
                <tr align="center" bgcolor="#000800" height="10px" style="color:white"><th> commit </th></tr>
                </table>
                """ + changelog + """
            </div>
        </body>
    </html>
    """
    mail body: body, cc: "${FAIL_MAIL_TO}", charset: 'UTF-8', mimeType: 'text/html',subject:subjects , to: "${FAIL_MAIL_TO}"
    
}

def getchangelog()
{
writeFile file: 'createfailreport.py', text: '''import os
class createFailReport(object):
    def __init__(self):
        self.tStatistics = open(".\\\\report.html" , \'wb\')
        
    def getchangelog(self):
        infos=[]
        f = open(".\\\\gitchangelog.txt","r")
        modules = ["agent","sdp","sdk","firmwares/base","firmwares/cp0","firmwares/ui","firmwares/zeus","platforms/edison","platforms/phoenix"]
        loginfo = {}
        i = 0
        for line in f.readlines():
            if line.replace("\\n","") in modules:
                print line
                project = line
                continue
            if i == 1:

                if (not line.startswith("commit")) and (not line.startswith("Author")) and (not line.startswith("Date")) and (not line.startswith(":"))  :
                    loginfo["info"] = loginfo["info"] + line
                else :
                    if ( line.startswith(":") or line.startswith("commit") ):
                        print loginfo["project"]
                        infos.append(loginfo)
                        i = 0
                    else :                        
                        if (not line.startswith("Date") ) and (not line.startswith("Author")) :
                            infos.append(loginfo)
                            i = 0
            if i == 1 and line.startswith("Date"):
                date,space,space,loginfo["week"],loginfo["month"],loginfo["day"],loginfo["time"],loginfo["year"],nouse = line.split(" ")
            if i == 1 and line.startswith("Author"):
                author = []
                author = line.split(" ")
                loginfo["name"] = " "
                for a in author:
                    if a.startswith("<"):
                        loginfo["email"] = a
                    if a == "Author:":
                        print " "
                    else:
                        loginfo["name"] = loginfo["name"] + a


            if i == 0 and line.startswith("commit"):
                i = 1
                loginfo = {}
                commit,loginfo["id"] = line.split(" ")
                loginfo["info"] = ""
                loginfo["project"] = project
        
        if i == 1 :
            infos.append(loginfo)
        f.close()

        self.tStatistics.write("""
            <br></br>
            <br></br>
            <table  border="0" cellpadding="5"  align=center  cellspacing="2" width="95%">            
            <tr><th>i</th><th>module</th><th>id</th><th>time</th><th>message</th><th>name</th><th>email</th></tr>
            """)
        i = 1
        for f in infos:
            print f
            f["email"] = f["email"].replace("<","")
            f["email"] = f["email"].replace(">","")
            self.tStatistics.write("<tr><td>" +  str(i) + "</td><td>" + f["project"] + "</td><td>"+f["id"] + "</td><td>" + f["year"] + "-" + f["month"] + "-"+ f["day"] + "-"+ f["time"] + "</td><td>" + f["info"] + "</td><td>" + f["name"] + "</td><td>" + f["email"] + "</td></tr>")
            
            i = i + 1
        self.tStatistics.write("</table>")
    
    
    def createchangelog(self):
        if os.path.exists(".\\\\gitchangelog.txt"):
            print "[createReport] find the gitchangelog.txt "
            self.getchangelog()
        else:
            print "[createReport] do not find the gitchangelog"
if __name__ == "__main__":
    report = createFailReport()
    report.createchangelog()
'''
    bat 'python createfailreport.py'
    def changelog = readFile('report.html')
    return changelog

   
}
// publish the successful report
def publishTestReport(testTypes, noNeedReportStage, sendReport) {
    
    reportDir = "testdata/report"
    reportFiles = ""
    for(t in testTypes) 
    {
        if(!noNeedReportStage.contains(t))  
        {
            bat 'copy  \"' + t +'\\report\\\"* ' + "testdata\\report\\"
            cmdstr = "move testdata\\report\\report.html \"testdata\\report\\" + t + '.html\"'
            bat cmdstr
            bat 'copy  \"' + t +'\\\"testinfo.json testdata\\report\\json\\'
            bat "move testdata\\report\\json\\testinfo.json \"testdata\\report\\json\\" + t + '.json\"'
            //not complete
            bat 'copy \"' + t + '\\log\\\"* ' + "\"testdata\\report\\log\\" + t + "\\\""
            
            reportFiles = reportFiles + t +".html,"
        }
        
    }
    
    
    if(sendReport) 
    {
        
        echo "================================================================================"
        stage "Create Report"        
        echo "================================================================================"
        dir("Send Report")
        {
            execCommand("cirun.cmd")
        }
       
    }
    
    reportFiles = reportFiles + "summary.html"
    echo reportFiles
    name = "TestReport"
    publishHTML(target:[allowMissing: true, alwaysLinkToLastBuild: false, keepAll: true, reportDir: reportDir, reportFiles: reportFiles, reportName: name])
    
    if(sendReport){
        //send test mail to wei.meng
        
        echo "================================================================================"
        stage "Send mail"
        
        echo "================================================================================"
        String mailbody = readFile(".\\testdata\\report\\summary.html")
        String subjects = 'ZEUS AUTO TEST REPORT -- ' + env.JOB_NAME + "--" +  env.BUILD_NUMBER
        echo subjects
        mail body: mailbody, cc: "${MAIL_CC}", charset: 'UTF-8', mimeType: 'text/html',subject:subjects , to: "${MAIL_TO}"
    
    }
    
    //push the report to the share dir not complete
    //push the log file to the share dir
    //change the log dir to 10.254.0.3
    bat "mkdir \\\\10.254.0.3\\Share\\test_release\\daily\\TestReport\\%JOB_NAME%\\%BUILD_NUMBER%"
    bat "xcopy /yse .\\testdata\\report\\* \\\\10.254.0.3\\Share\\test_release\\daily\\TestReport\\%JOB_NAME%\\%BUILD_NUMBER%\\"
    
}

//work fine at windows when the git remote-url local-url command do not work good
def checkout(remote,local)
{
    
    //delete all things at jenkins workspace
    echo "-----------------------------------------------------"
    bat 'del /s /Q *'
    bat 'if exist checkout ( rd /s /q checkout )'
    echo "-----------------------------"
    str = "if exist " + local + " ( cd " + local + " & git pull " + remote + " ) else ( md " + local + " & git clone " + remote + " " + local + "\\ )"
    echo str
    bat str
    //bat "git clone " + remote + " " + local + "\\"
    echo "-----------------------------------------------------"
}
// execut the command
def execCommand(cmd) {
    if(isUnix()) 
    {
        sh cmd
    } 
    else 
    {
        bat cmd
    }
}
