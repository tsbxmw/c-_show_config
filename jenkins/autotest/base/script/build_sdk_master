/*
 * date : 20170619
 * author : wei.meng @ slamtec
 * version : 0.3
 * modify : 20170619 - remove the folder creator of changelog saver
 * description : the rebuild time maybe not work fine. - always branch xxxx failed.
*/

def date_build 
def version_build
def commit_id = {}

configENV()

stage "Get Parameters"
if("${COMMIT_ID}" == "" || "${COMMIT_ID}" == "master")
{
        
    node('Rsg-slave4')
    {
        //checkout
        // git log get the last commit id 
        def modules = ["sdk"]
        if ("${DATE_OF_BUILD}" == "")
        {
            date_build = new Date().format('yyyyMMdd')
            print "DATE_OF_BUILD is null"
        }
        checkoutGIT()
        
        if ("${VERSION_OF_BUILD}" == "")
        {
            version_build = (getVersion().tokenize())[0]
            version_build.replace(' ','')
            print "VERSION_OF_BUILD is null"
        }
        // get the sha of the last commit 
    
        commit_id = getCommitID()
        print "${DATE_OF_BUILD}"
        echo "${DATE_OF_BUILD}"
       
        
        print date_build
        print version_build
        
        for (module in modules)
        {
            print module
            print commit_id[module]
        }
    }

}


stage "Stage One - Build "


def build_times = "${REBUILD_TIMES}".toInteger()
def path_of_release = "${DAILY_FOLDER}"
def path_share_release = "$SHARE_PATH"
def branches = [:]
def results_of_stage_one = {}

branches["RPSG-RELEASE-sdk-android-daily_new"] = {
    echo "all - " + build_times
    int i = 0
    while (i < build_times)
    {
        def result = []
        result =  build job: 'RPSG-RELEASE-sdk-android-daily_new', parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdk"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build], 
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build], 
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release]], propagate: false
   
        if(result["result"] == "SUCCESS")
        {

            results_of_stage_one["RPSG-RELEASE-sdk-android-daily_new"] = true
            echo "Test Daily [RPSG-RELEASE-sdk-android-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            results_of_stage_one["RPSG-RELEASE-sdk-android-daily_new"] = false
            echo "Test Daily [RPSG-RELEASE-sdk-android-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }

    }
   
}

branches["RPSG-RELEASE-sdk-ios-daily_new"] = {
     echo "all - " + build_times
    int i = 0
    while (i < build_times)
    {
        def result = []
        result =  build job: 'RPSG-RELEASE-sdk-ios-daily_new', parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdk"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build], 
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build], 
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release]], propagate: false
   
        if(result["result"] == "SUCCESS")
        {
            results_of_stage_one["RPSG-RELEASE-sdk-ios-daily_new"] = true
            echo "Test Daily [RPSG-RELEASE-sdk-ios-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            results_of_stage_one["RPSG-RELEASE-sdk-ios-daily_new"] = false
            echo "Test Daily [RPSG-RELEASE-sdk-ios-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }

    }
   
}


branches["RPSG-RELEASE-sdk-linux-daily_new"] = {
     echo "all - " + build_times
    int i = 0
    while (i < build_times)
    {
        def result = []
        result =  build job: 'RPSG-RELEASE-sdk-linux-daily_new', parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdk"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build], 
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build], 
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release]], propagate: false
   
        if(result["result"] == "SUCCESS")
        {

            results_of_stage_one["RPSG-RELEASE-sdk-linux-daily_new"] = true
            echo "Test Daily [RPSG-RELEASE-sdk-linux-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            results_of_stage_one["RPSG-RELEASE-sdk-linux-daily_new"] = false
            echo "Test Daily [RPSG-RELEASE-sdk-linux-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }

    }
   
}


branches["RPSG-RELEASE-sdk-linux-i386-gcc4.8-daily_new"] = {
     echo "all - " + build_times
    int i = 0
    while (i < build_times)
    {
        def result = []
        result =  build job: 'RPSG-RELEASE-sdk-linux-i386-gcc4.8-daily_new', parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdk"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build], 
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build], 
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release]], propagate: false
   
        if(result["result"] == "SUCCESS")
        {

            results_of_stage_one["RPSG-RELEASE-sdk-linux-i386-gcc4.8-daily_new"] = true
            echo "Test Daily [RPSG-RELEASE-sdk-linux-i386-gcc4.8-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            results_of_stage_one["RPSG-RELEASE-sdk-linux-i386-gcc4.8-daily_new"] = false
            echo "Test Daily [RPSG-RELEASE-sdk-linux-i386-gcc4.8-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }

    }
   
}


branches["RPSG-RELEASE-sdk-linux-x86_64-gcc4.8-daily_new"] = {
     echo "all - " + build_times
    int i = 0
    while (i < build_times)
    {
        def result = []
        result =  build job: 'RPSG-RELEASE-sdk-linux-x86_64-gcc4.8-daily_new', parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdk"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build], 
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build], 
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release]], propagate: false
   
        if(result["result"] == "SUCCESS")
        {

            results_of_stage_one["RPSG-RELEASE-sdk-linux-x86_64-gcc4.8-daily_new"] = true
            echo "Test Daily [RPSG-RELEASE-sdk-linux-x86_64-gcc4.8-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            results_of_stage_one["RPSG-RELEASE-sdk-linux-x86_64-gcc4.8-daily_new"] = false
            echo "Test Daily [RPSG-RELEASE-sdk-linux-x86_64-gcc4.8-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }

    }
   
}


branches["RPSG-RELEASE-sdk-slamware_config_tool-daily_new"] = {
     echo "all - " + build_times
    int i = 0
    while (i < build_times)
    {
        def result = []
        result =  build job: 'RPSG-RELEASE-sdk-slamware_config_tool-daily_new', parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdk"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build], 
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build], 
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_of_release]], propagate: false
   
        if(result["result"] == "SUCCESS")
        {

            results_of_stage_one["RPSG-RELEASE-sdk-slamware_config_tool-daily_new"] = true
            echo "Test Daily [RPSG-RELEASE-sdk-slamware_config_tool-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            results_of_stage_one["RPSG-RELEASE-sdk-slamware_config_tool-daily_new"] = false
            echo "Test Daily [RPSG-RELEASE-sdk-slamware_config_tool-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }

    }
   
}


branches["RPSG-RELEASE-sdk-windows-daily_new"] = {
     echo "all - " + build_times
    int i = 0
    while (i < build_times)
    {
        def result = []
        result =  build job: 'RPSG-RELEASE-sdk-windows-daily_new', parameters: [
        [$class: 'StringParameterValue', name: 'COMMIT_ID', value: commit_id["sdk"]],
        [$class: 'StringParameterValue', name: 'DATE_OF_BUILD', value: date_build], 
        [$class: 'StringParameterValue', name: 'VERSION_OF_BUILD', value: version_build], 
        [$class: 'StringParameterValue', name: 'DAILY_FOLDER', value: path_share_release]], propagate: false
   
        if(result["result"] == "SUCCESS")
        {

            results_of_stage_one["RPSG-RELEASE-sdk-windows-daily_new"] = true
            echo "Test Daily [RPSG-RELEASE-sdk-windows-daily_new]  Successful !"
            echo "-----------------------------------------------------"
            break
        }
        else{
            results_of_stage_one["RPSG-RELEASE-sdk-windows-daily_new"] = false
            echo "Test Daily [RPSG-RELEASE-sdk-windows-daily_new]  Failed !"
            echo "-----------------------------------------------------"
            echo "try times - " + i
            i = i + 1
        }

    }
   
}



parallel branches

def configENV()
{
    try { env.COMMIT_ID = "${COMMIT_ID}"               }catch(Exception e){}
    try { env.DATE_OF_BUILD = "${DATE_OF_BUILD}"       }catch(Exception e){}
    try { env.VERSION_OF_BUILD = "${VERSION_OF_BUILD}" }catch(Exception e){}

}

def checkoutGIT()
{
    checkout([$class: 'GitSCM', branches: [[name: '*/master']],
     doGenerateSubmoduleConfigurations: false, 
     extensions: [],
     gitTool: 'Default',
     submoduleCfg: [],
     userRemoteConfigs: [
         [credentialsId: '6e519a56-9857-46cc-ad30-369cd6984189',
         url: 'https://stash.slamtec.com/scm/slam/topic_slamware_release.git']
     ]
    ])
    //get commit id 
}

def getCommitID()
{
    if ("${DATE_OF_BUILD}" == "")
    {
        date_build = new Date().format('yyyyMMdd')
        print "DATE_OF_BUILD is null"
    }else{
        date_build = "${DATE_OF_BUILD}"
    }
    def currentdir = pwd()
    def commit_idx = {}
    dir(currentdir)
    {
        def submodules = ["sdk"]
       //sh 'rm -rf ./sdk/*'
        sh 'rm -rf ./master_changelog/*'
        sh 'if [ ! -d "master_changelog" ] ; then mkdir master_changelog; fi'
        sh 'git submodule update --init --recursive sdk'
        for (submodule in submodules)
        {

            dir(submodule)
            {
                
                echo pwd()
                sh 'git submodule update --init --recursive'
                //sh 'if [ ! -f "gitchangelog.txt" ] ; then rm -f gitchangelog ; fi'
                sh 'git whatchanged --since="1 days ago" >> ' + currentdir +'/master_changelog/gitchangelog.txt'
                sh 'git log -1 > gitchangelog.txt'
                //sh 'cp -f gitchangelog.txt ' + currentdir + '/master_changelog/' + submodule + '.log'
                sh 'head -1 gitchangelog.txt > commitid.txt'
                def strx = readFile 'commitid.txt'
                def str1 = strx.split(' ')
                for(str in str1)
                {
                    if (str.startsWith('commit'))
                        print "this is commit"
                    else
                        commit_idx[submodule] = str
                }
            }
        }
        //sh 'mkdir -p ' + "${DAILY_FOLDER}" + "/changelog/" + date_build +"/"
        //sh 'cp -rf master_changelog/* ' +  "${DAILY_FOLDER}"  + "/changelog/" + date_build +"/"
    }
    return commit_idx

}

def getVersion()
{
    version = readFile 'scripts/version.txt'
    return version
}

